# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PY_NANOMSG', [dirname(__file__)])
        except ImportError:
            import _PY_NANOMSG
            return _PY_NANOMSG
        if fp is not None:
            try:
                _mod = imp.load_module('_PY_NANOMSG', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _PY_NANOMSG = swig_import_helper()
    del swig_import_helper
else:
    import _PY_NANOMSG
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


NN_VERSION_CURRENT = _PY_NANOMSG.NN_VERSION_CURRENT
NN_VERSION_REVISION = _PY_NANOMSG.NN_VERSION_REVISION
NN_VERSION_AGE = _PY_NANOMSG.NN_VERSION_AGE
NN_HAUSNUMERO = _PY_NANOMSG.NN_HAUSNUMERO
ENOTSUP = _PY_NANOMSG.ENOTSUP
EPROTONOSUPPORT = _PY_NANOMSG.EPROTONOSUPPORT
ENOBUFS = _PY_NANOMSG.ENOBUFS
ENETDOWN = _PY_NANOMSG.ENETDOWN
EADDRINUSE = _PY_NANOMSG.EADDRINUSE
EADDRNOTAVAIL = _PY_NANOMSG.EADDRNOTAVAIL
ECONNREFUSED = _PY_NANOMSG.ECONNREFUSED
EINPROGRESS = _PY_NANOMSG.EINPROGRESS
ENOTSOCK = _PY_NANOMSG.ENOTSOCK
EAFNOSUPPORT = _PY_NANOMSG.EAFNOSUPPORT
EPROTO = _PY_NANOMSG.EPROTO
EAGAIN = _PY_NANOMSG.EAGAIN
EBADF = _PY_NANOMSG.EBADF
EINVAL = _PY_NANOMSG.EINVAL
EMFILE = _PY_NANOMSG.EMFILE
EFAULT = _PY_NANOMSG.EFAULT
EACCES = _PY_NANOMSG.EACCES
EACCESS = _PY_NANOMSG.EACCESS
ENETRESET = _PY_NANOMSG.ENETRESET
ENETUNREACH = _PY_NANOMSG.ENETUNREACH
EHOSTUNREACH = _PY_NANOMSG.EHOSTUNREACH
ENOTCONN = _PY_NANOMSG.ENOTCONN
EMSGSIZE = _PY_NANOMSG.EMSGSIZE
ETIMEDOUT = _PY_NANOMSG.ETIMEDOUT
ECONNABORTED = _PY_NANOMSG.ECONNABORTED
ECONNRESET = _PY_NANOMSG.ECONNRESET
ENOPROTOOPT = _PY_NANOMSG.ENOPROTOOPT
EISCONN = _PY_NANOMSG.EISCONN
ESOCKTNOSUPPORT = _PY_NANOMSG.ESOCKTNOSUPPORT
ETERM = _PY_NANOMSG.ETERM
EFSM = _PY_NANOMSG.EFSM

def nn_errno():
  return _PY_NANOMSG.nn_errno()
nn_errno = _PY_NANOMSG.nn_errno

def nn_strerror(*args):
  return _PY_NANOMSG.nn_strerror(*args)
nn_strerror = _PY_NANOMSG.nn_strerror

def nn_symbol(*args):
  return _PY_NANOMSG.nn_symbol(*args)
nn_symbol = _PY_NANOMSG.nn_symbol
NN_NS_NAMESPACE = _PY_NANOMSG.NN_NS_NAMESPACE
NN_NS_VERSION = _PY_NANOMSG.NN_NS_VERSION
NN_NS_DOMAIN = _PY_NANOMSG.NN_NS_DOMAIN
NN_NS_TRANSPORT = _PY_NANOMSG.NN_NS_TRANSPORT
NN_NS_PROTOCOL = _PY_NANOMSG.NN_NS_PROTOCOL
NN_NS_OPTION_LEVEL = _PY_NANOMSG.NN_NS_OPTION_LEVEL
NN_NS_SOCKET_OPTION = _PY_NANOMSG.NN_NS_SOCKET_OPTION
NN_NS_TRANSPORT_OPTION = _PY_NANOMSG.NN_NS_TRANSPORT_OPTION
NN_NS_OPTION_TYPE = _PY_NANOMSG.NN_NS_OPTION_TYPE
NN_NS_OPTION_UNIT = _PY_NANOMSG.NN_NS_OPTION_UNIT
NN_NS_FLAG = _PY_NANOMSG.NN_NS_FLAG
NN_NS_ERROR = _PY_NANOMSG.NN_NS_ERROR
NN_NS_LIMIT = _PY_NANOMSG.NN_NS_LIMIT
NN_TYPE_NONE = _PY_NANOMSG.NN_TYPE_NONE
NN_TYPE_INT = _PY_NANOMSG.NN_TYPE_INT
NN_TYPE_STR = _PY_NANOMSG.NN_TYPE_STR
NN_UNIT_NONE = _PY_NANOMSG.NN_UNIT_NONE
NN_UNIT_BYTES = _PY_NANOMSG.NN_UNIT_BYTES
NN_UNIT_MILLISECONDS = _PY_NANOMSG.NN_UNIT_MILLISECONDS
NN_UNIT_PRIORITY = _PY_NANOMSG.NN_UNIT_PRIORITY
NN_UNIT_BOOLEAN = _PY_NANOMSG.NN_UNIT_BOOLEAN
class nn_symbol_properties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nn_symbol_properties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nn_symbol_properties, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _PY_NANOMSG.nn_symbol_properties_value_set
    __swig_getmethods__["value"] = _PY_NANOMSG.nn_symbol_properties_value_get
    if _newclass:value = _swig_property(_PY_NANOMSG.nn_symbol_properties_value_get, _PY_NANOMSG.nn_symbol_properties_value_set)
    __swig_setmethods__["name"] = _PY_NANOMSG.nn_symbol_properties_name_set
    __swig_getmethods__["name"] = _PY_NANOMSG.nn_symbol_properties_name_get
    if _newclass:name = _swig_property(_PY_NANOMSG.nn_symbol_properties_name_get, _PY_NANOMSG.nn_symbol_properties_name_set)
    __swig_setmethods__["ns"] = _PY_NANOMSG.nn_symbol_properties_ns_set
    __swig_getmethods__["ns"] = _PY_NANOMSG.nn_symbol_properties_ns_get
    if _newclass:ns = _swig_property(_PY_NANOMSG.nn_symbol_properties_ns_get, _PY_NANOMSG.nn_symbol_properties_ns_set)
    __swig_setmethods__["type"] = _PY_NANOMSG.nn_symbol_properties_type_set
    __swig_getmethods__["type"] = _PY_NANOMSG.nn_symbol_properties_type_get
    if _newclass:type = _swig_property(_PY_NANOMSG.nn_symbol_properties_type_get, _PY_NANOMSG.nn_symbol_properties_type_set)
    __swig_setmethods__["unit"] = _PY_NANOMSG.nn_symbol_properties_unit_set
    __swig_getmethods__["unit"] = _PY_NANOMSG.nn_symbol_properties_unit_get
    if _newclass:unit = _swig_property(_PY_NANOMSG.nn_symbol_properties_unit_get, _PY_NANOMSG.nn_symbol_properties_unit_set)
    def __init__(self): 
        this = _PY_NANOMSG.new_nn_symbol_properties()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PY_NANOMSG.delete_nn_symbol_properties
    __del__ = lambda self : None;
nn_symbol_properties_swigregister = _PY_NANOMSG.nn_symbol_properties_swigregister
nn_symbol_properties_swigregister(nn_symbol_properties)


def nn_symbol_info(*args):
  return _PY_NANOMSG.nn_symbol_info(*args)
nn_symbol_info = _PY_NANOMSG.nn_symbol_info

def nn_term():
  return _PY_NANOMSG.nn_term()
nn_term = _PY_NANOMSG.nn_term

def nn_allocmsg(*args):
  return _PY_NANOMSG.nn_allocmsg(*args)
nn_allocmsg = _PY_NANOMSG.nn_allocmsg

def nn_reallocmsg(*args):
  return _PY_NANOMSG.nn_reallocmsg(*args)
nn_reallocmsg = _PY_NANOMSG.nn_reallocmsg

def nn_freemsg(*args):
  return _PY_NANOMSG.nn_freemsg(*args)
nn_freemsg = _PY_NANOMSG.nn_freemsg
class nn_iovec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nn_iovec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nn_iovec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iov_base"] = _PY_NANOMSG.nn_iovec_iov_base_set
    __swig_getmethods__["iov_base"] = _PY_NANOMSG.nn_iovec_iov_base_get
    if _newclass:iov_base = _swig_property(_PY_NANOMSG.nn_iovec_iov_base_get, _PY_NANOMSG.nn_iovec_iov_base_set)
    __swig_setmethods__["iov_len"] = _PY_NANOMSG.nn_iovec_iov_len_set
    __swig_getmethods__["iov_len"] = _PY_NANOMSG.nn_iovec_iov_len_get
    if _newclass:iov_len = _swig_property(_PY_NANOMSG.nn_iovec_iov_len_get, _PY_NANOMSG.nn_iovec_iov_len_set)
    def __init__(self): 
        this = _PY_NANOMSG.new_nn_iovec()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PY_NANOMSG.delete_nn_iovec
    __del__ = lambda self : None;
nn_iovec_swigregister = _PY_NANOMSG.nn_iovec_swigregister
nn_iovec_swigregister(nn_iovec)

class nn_msghdr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nn_msghdr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nn_msghdr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msg_iov"] = _PY_NANOMSG.nn_msghdr_msg_iov_set
    __swig_getmethods__["msg_iov"] = _PY_NANOMSG.nn_msghdr_msg_iov_get
    if _newclass:msg_iov = _swig_property(_PY_NANOMSG.nn_msghdr_msg_iov_get, _PY_NANOMSG.nn_msghdr_msg_iov_set)
    __swig_setmethods__["msg_iovlen"] = _PY_NANOMSG.nn_msghdr_msg_iovlen_set
    __swig_getmethods__["msg_iovlen"] = _PY_NANOMSG.nn_msghdr_msg_iovlen_get
    if _newclass:msg_iovlen = _swig_property(_PY_NANOMSG.nn_msghdr_msg_iovlen_get, _PY_NANOMSG.nn_msghdr_msg_iovlen_set)
    __swig_setmethods__["msg_control"] = _PY_NANOMSG.nn_msghdr_msg_control_set
    __swig_getmethods__["msg_control"] = _PY_NANOMSG.nn_msghdr_msg_control_get
    if _newclass:msg_control = _swig_property(_PY_NANOMSG.nn_msghdr_msg_control_get, _PY_NANOMSG.nn_msghdr_msg_control_set)
    __swig_setmethods__["msg_controllen"] = _PY_NANOMSG.nn_msghdr_msg_controllen_set
    __swig_getmethods__["msg_controllen"] = _PY_NANOMSG.nn_msghdr_msg_controllen_get
    if _newclass:msg_controllen = _swig_property(_PY_NANOMSG.nn_msghdr_msg_controllen_get, _PY_NANOMSG.nn_msghdr_msg_controllen_set)
    def __init__(self): 
        this = _PY_NANOMSG.new_nn_msghdr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PY_NANOMSG.delete_nn_msghdr
    __del__ = lambda self : None;
nn_msghdr_swigregister = _PY_NANOMSG.nn_msghdr_swigregister
nn_msghdr_swigregister(nn_msghdr)

class nn_cmsghdr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nn_cmsghdr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nn_cmsghdr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cmsg_len"] = _PY_NANOMSG.nn_cmsghdr_cmsg_len_set
    __swig_getmethods__["cmsg_len"] = _PY_NANOMSG.nn_cmsghdr_cmsg_len_get
    if _newclass:cmsg_len = _swig_property(_PY_NANOMSG.nn_cmsghdr_cmsg_len_get, _PY_NANOMSG.nn_cmsghdr_cmsg_len_set)
    __swig_setmethods__["cmsg_level"] = _PY_NANOMSG.nn_cmsghdr_cmsg_level_set
    __swig_getmethods__["cmsg_level"] = _PY_NANOMSG.nn_cmsghdr_cmsg_level_get
    if _newclass:cmsg_level = _swig_property(_PY_NANOMSG.nn_cmsghdr_cmsg_level_get, _PY_NANOMSG.nn_cmsghdr_cmsg_level_set)
    __swig_setmethods__["cmsg_type"] = _PY_NANOMSG.nn_cmsghdr_cmsg_type_set
    __swig_getmethods__["cmsg_type"] = _PY_NANOMSG.nn_cmsghdr_cmsg_type_get
    if _newclass:cmsg_type = _swig_property(_PY_NANOMSG.nn_cmsghdr_cmsg_type_get, _PY_NANOMSG.nn_cmsghdr_cmsg_type_set)
    def __init__(self): 
        this = _PY_NANOMSG.new_nn_cmsghdr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PY_NANOMSG.delete_nn_cmsghdr
    __del__ = lambda self : None;
nn_cmsghdr_swigregister = _PY_NANOMSG.nn_cmsghdr_swigregister
nn_cmsghdr_swigregister(nn_cmsghdr)


def nn_cmsg_nxthdr_(*args):
  return _PY_NANOMSG.nn_cmsg_nxthdr_(*args)
nn_cmsg_nxthdr_ = _PY_NANOMSG.nn_cmsg_nxthdr_
AF_SP = _PY_NANOMSG.AF_SP
AF_SP_RAW = _PY_NANOMSG.AF_SP_RAW
NN_SOCKADDR_MAX = _PY_NANOMSG.NN_SOCKADDR_MAX
NN_SOL_SOCKET = _PY_NANOMSG.NN_SOL_SOCKET
NN_LINGER = _PY_NANOMSG.NN_LINGER
NN_SNDBUF = _PY_NANOMSG.NN_SNDBUF
NN_RCVBUF = _PY_NANOMSG.NN_RCVBUF
NN_SNDTIMEO = _PY_NANOMSG.NN_SNDTIMEO
NN_RCVTIMEO = _PY_NANOMSG.NN_RCVTIMEO
NN_RECONNECT_IVL = _PY_NANOMSG.NN_RECONNECT_IVL
NN_RECONNECT_IVL_MAX = _PY_NANOMSG.NN_RECONNECT_IVL_MAX
NN_SNDPRIO = _PY_NANOMSG.NN_SNDPRIO
NN_RCVPRIO = _PY_NANOMSG.NN_RCVPRIO
NN_SNDFD = _PY_NANOMSG.NN_SNDFD
NN_RCVFD = _PY_NANOMSG.NN_RCVFD
NN_DOMAIN = _PY_NANOMSG.NN_DOMAIN
NN_PROTOCOL = _PY_NANOMSG.NN_PROTOCOL
NN_IPV4ONLY = _PY_NANOMSG.NN_IPV4ONLY
NN_SOCKET_NAME = _PY_NANOMSG.NN_SOCKET_NAME
NN_DONTWAIT = _PY_NANOMSG.NN_DONTWAIT
PROTO_SP = _PY_NANOMSG.PROTO_SP
SP_HDR = _PY_NANOMSG.SP_HDR

def nn_socket(*args):
  return _PY_NANOMSG.nn_socket(*args)
nn_socket = _PY_NANOMSG.nn_socket

def nn_close(*args):
  return _PY_NANOMSG.nn_close(*args)
nn_close = _PY_NANOMSG.nn_close

def nn_setsockopt(*args):
  return _PY_NANOMSG.nn_setsockopt(*args)
nn_setsockopt = _PY_NANOMSG.nn_setsockopt

def nn_getsockopt(*args):
  return _PY_NANOMSG.nn_getsockopt(*args)
nn_getsockopt = _PY_NANOMSG.nn_getsockopt

def nn_bind(*args):
  return _PY_NANOMSG.nn_bind(*args)
nn_bind = _PY_NANOMSG.nn_bind

def nn_connect(*args):
  return _PY_NANOMSG.nn_connect(*args)
nn_connect = _PY_NANOMSG.nn_connect

def nn_shutdown(*args):
  return _PY_NANOMSG.nn_shutdown(*args)
nn_shutdown = _PY_NANOMSG.nn_shutdown

def nn_send(*args):
  return _PY_NANOMSG.nn_send(*args)
nn_send = _PY_NANOMSG.nn_send

def nn_recv(*args):
  return _PY_NANOMSG.nn_recv(*args)
nn_recv = _PY_NANOMSG.nn_recv

def nn_sendmsg(*args):
  return _PY_NANOMSG.nn_sendmsg(*args)
nn_sendmsg = _PY_NANOMSG.nn_sendmsg

def nn_recvmsg(*args):
  return _PY_NANOMSG.nn_recvmsg(*args)
nn_recvmsg = _PY_NANOMSG.nn_recvmsg
NN_POLLIN = _PY_NANOMSG.NN_POLLIN
NN_POLLOUT = _PY_NANOMSG.NN_POLLOUT
class nn_pollfd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, nn_pollfd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, nn_pollfd, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fd"] = _PY_NANOMSG.nn_pollfd_fd_set
    __swig_getmethods__["fd"] = _PY_NANOMSG.nn_pollfd_fd_get
    if _newclass:fd = _swig_property(_PY_NANOMSG.nn_pollfd_fd_get, _PY_NANOMSG.nn_pollfd_fd_set)
    __swig_setmethods__["events"] = _PY_NANOMSG.nn_pollfd_events_set
    __swig_getmethods__["events"] = _PY_NANOMSG.nn_pollfd_events_get
    if _newclass:events = _swig_property(_PY_NANOMSG.nn_pollfd_events_get, _PY_NANOMSG.nn_pollfd_events_set)
    __swig_setmethods__["revents"] = _PY_NANOMSG.nn_pollfd_revents_set
    __swig_getmethods__["revents"] = _PY_NANOMSG.nn_pollfd_revents_get
    if _newclass:revents = _swig_property(_PY_NANOMSG.nn_pollfd_revents_get, _PY_NANOMSG.nn_pollfd_revents_set)
    def __init__(self): 
        this = _PY_NANOMSG.new_nn_pollfd()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _PY_NANOMSG.delete_nn_pollfd
    __del__ = lambda self : None;
nn_pollfd_swigregister = _PY_NANOMSG.nn_pollfd_swigregister
nn_pollfd_swigregister(nn_pollfd)


def nn_poll(*args):
  return _PY_NANOMSG.nn_poll(*args)
nn_poll = _PY_NANOMSG.nn_poll

def nn_device(*args):
  return _PY_NANOMSG.nn_device(*args)
nn_device = _PY_NANOMSG.nn_device
NN_PROTO_SURVEY = _PY_NANOMSG.NN_PROTO_SURVEY
NN_SURVEYOR = _PY_NANOMSG.NN_SURVEYOR
NN_RESPONDENT = _PY_NANOMSG.NN_RESPONDENT
NN_SURVEYOR_DEADLINE = _PY_NANOMSG.NN_SURVEYOR_DEADLINE

def malloc_void_p(*args):
  return _PY_NANOMSG.malloc_void_p(*args)
malloc_void_p = _PY_NANOMSG.malloc_void_p

def free_void_p(*args):
  return _PY_NANOMSG.free_void_p(*args)
free_void_p = _PY_NANOMSG.free_void_p

def cdata(*args):
  return _PY_NANOMSG.cdata(*args)
cdata = _PY_NANOMSG.cdata

def memmove(*args):
  return _PY_NANOMSG.memmove(*args)
memmove = _PY_NANOMSG.memmove
# This file is compatible with both classic and new-style classes.


